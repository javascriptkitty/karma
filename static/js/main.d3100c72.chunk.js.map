{"version":3,"sources":["components/Expansion/index.js","components/Slider/index.js","App.js","serviceWorker.js","index.js"],"names":["makeStyles","theme","root","width","heading","fontSize","typography","pxToRem","fontWeight","fontWeightRegular","React","Component","createSliderWithTooltip","Slider","Range","DynamicBounds","props","onDone","index","interval","setState","intervals","state","concat","views","this","map","i","key","mode","defaultState","inclusive","threshold","value","EditInterval","onChangeInclusive","event","target","onChangeThreshold","onChangeValue","onAdd","parseFloat","onEditInterval","onClick","label","onChange","renderEditAdd","renderView","sections","title","comment","App","minWidth","bullet","display","margin","transform","pos","marginBottom","getMarks","console","log","marks","el","min","max","step","toFixed","push","onStepChange","onMinChange","onMaxChange","onSectionValueChange","sectionValue","stepValue","classes","Container","className","section","Card","variant","CardContent","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d3100c72.chunk.js","sourcesContent":["import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  ExpansionPanel,\n  ExpansionPanelSummary,\n  ExpansionPanelDetails,\n  TextField\n} from \"@material-ui/core\";\n\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport \"./style.css\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: \"100%\"\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    fontWeight: theme.typography.fontWeightRegular\n  }\n}));\n\nexport default class Expansion extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = Object.assign({}, props.params);\n  }\n\n  onMinChange = event => {\n    const value = event.target.value;\n\n    const min = parseInt(value);\n    if (!isNaN(min)) {\n      this.props.onMinChange(min);\n    }\n    this.setState({ min: value });\n  };\n  onMaxChange = event => {\n    const value = event.target.value;\n\n    const max = parseInt(value);\n    if (!isNaN(max)) {\n      this.props.onMaxChange(max);\n    }\n    this.setState({ max: value });\n  };\n  onStepChange = event => {\n    const value = event.target.value;\n    debugger;\n    const step = parseInt(value);\n    if (!isNaN(step) && step != 0) {\n      this.props.onStepChange(step);\n    }\n    this.setState({ step: value });\n  };\n\n  render() {\n    const props = this.props;\n    const { min, max, step, sectionValue } = this.state;\n    const classes = {}; //useStyles();\n\n    return (\n      <div className={classes.root}>\n        <ExpansionPanel>\n          <ExpansionPanelSummary\n            expandIcon={<SettingsIcon />}\n            aria-controls=\"panel1a-content\"\n            id=\"panel1a-header\"\n          >\n            <h4>{this.props.data.title}</h4>\n            <p>{this.props.data.comment}</p>\n          </ExpansionPanelSummary>\n          {/* <ExpansionPanelDetails>\n            <form>\n              <div className=\"expansion-interval\">\n                <span>Interval</span>\n                <div>\n                  <TextField\n                    id=\"min\"\n                    value={min}\n                    label=\"min\"\n                    type=\"number\"\n                    onChange={this.onMinChange}\n                    className={classes.textField}\n                    InputLabelProps={{\n                      shrink: true\n                    }}\n                    margin=\"normal\"\n                  />\n                  <TextField\n                    id=\"max\"\n                    label=\"max\"\n                    type=\"number\"\n                    value={max}\n                    className={classes.textField}\n                    onChange={this.onMaxChange}\n                    InputLabelProps={{\n                      shrink: true\n                    }}\n                    margin=\"normal\"\n                  />\n                </div>\n              </div>\n              <TextField\n                id=\"step\"\n                label=\"Step\"\n                value={step}\n                className={classes.textField}\n                onChange={this.onStepChange}\n                InputLabelProps={{\n                  shrink: true\n                }}\n                margin=\"normal\"\n              />\n\n              <TextField\n                id=\"sectionValue\"\n                label=\"Section value\"\n                type=\"number\"\n                value={sectionValue}\n                className={classes.textField}\n                onChange={props.onSectionValueChange}\n                InputLabelProps={{\n                  shrink: true\n                }}\n                margin=\"normal\"\n              />\n            </form>\n          </ExpansionPanelDetails>*/}\n        </ExpansionPanel>\n      </div>\n    );\n  }\n}\n","import \"rc-slider/assets/index.css\";\nimport React, { Fragment } from \"react\";\nimport {\n  Button,\n  IconButton,\n  ExpansionPanel,\n  ExpansionPanelSummary,\n  ExpansionPanelDetails\n} from \"@material-ui/core\";\nimport Slider, { createSliderWithTooltip } from \"rc-slider\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\nimport \"./style.css\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport EditIcon from \"@material-ui/icons/Edit\";\n\nconst Range = createSliderWithTooltip(Slider.Range);\n\nfunction log(value) {\n  console.log(value); //eslint-disable-line\n}\n\nexport function AddInterval(props) {\n  const labelStyle = { minWidth: \"60px\", display: \"inline-block\" };\n  const inputStyle = { marginBottom: \"10px\" };\n  const { index, points } = props;\n  debugger;\n  return (\n    <div className=\"interval-line\">\n      {index == 0 ? <div>{`> ${points[index]}`}</div> : null}\n      {index == points.length - 1 ? <div>{`< ${points[index]}`}</div> : null}\n      {index !== 0 && index !== points.length - 1 ? (\n        <div>{`${points[index]} - ${points[index + 1]}`}</div>\n      ) : null}\n      <label style={labelStyle}>Value: </label>\n      <input\n        id=\"newIntValue\"\n        type=\"number\"\n        // onChange={props.onIntervalValueChange}\n      />\n      <Button variant=\"outlined\" size=\"small\">\n        <EditIcon />\n      </Button>\n      <Button variant=\"outlined\" size=\"small\">\n        <DeleteIcon />\n      </Button>\n    </div>\n  );\n}\n// export default class DynamicBounds extends React.Component {\n//   constructor(props) {\n//     super(props);\n\n//     // this.state = {\n//     //   step: 1,\n//     //   points: [],\n//     //   values: [],\n//     //   sectionValue: 0.15,\n//     //   intervals: [],\n//     //   showAdd: true\n//     // };\n//     this.state = {\n//       intervals: []\n//     };\n//   }\n\n//   changeShowAdd = () => {\n//     this.setState({\n//       showAdd: !this.state.showAdd\n//     });\n//   };\n\n//   renderAddInterval = () => {\n//     const points = this.state.points;\n//     const intervals = [];\n//     for (let i = 0; i < points.length; i++) {\n//       intervals.push(\n//         <AddInterval\n//           key={i}\n//           index={i}\n//           points={this.state.points}\n//           onIntervalValueChange={this.onIntervalValueChange}\n//         />\n//       );\n//     }\n//     return intervals;\n//   };\n\n//   onSliderChange = values => {\n//     log(values);\n//     this.setState({ values });\n//   };\n//   onAfterChange = value => {\n//     console.log(value); //eslint-disable-line\n//   };\n\n//   onIntervalValueChange = e => {\n//     this.setState({\n//       intervalValue: +e.target.value || 0\n//     });\n//   };\n\n//   onStepChange = e => {\n//     this.setState({\n//       step: +e.target.value || 1\n//     });\n//   };\n//   onSectionValueChange = event => {\n//     this.setState({ sectionValue: event.target.value });\n//   };\n\n//   updateMarks = () => {\n//     const point = 1.0;\n\n//     const newValue = this.state.values.concat([parseInt(point)]);\n//     const newPoints = this.state.points.concat([parseInt(point)]);\n//     this.setState({\n//       values: newValue,\n//       points: newPoints,\n//       showAdd: true\n//     });\n//   };\n\n//   render() {\n//     const labelStyle = { minWidth: \"60px\", display: \"inline-block\" };\n//     const inputStyle = { marginBottom: \"10px\" };\n\n//     const { min, max } = this.state;\n//     const marks = {};\n\n//     return (\n//       <div className=\"inputs\">\n//         <ExpansionPanel>\n//           <ExpansionPanelSummary\n//             expandIcon={<SettingsIcon />}\n//             aria-controls=\"panel1a-content\"\n//             id=\"panel1a-header\"\n//           >\n//             <Range\n//               value={this.state.points}\n//               min={this.state.min}\n//               max={this.state.max}\n//               step={this.state.step}\n//               marks={marks}\n//               onChange={log}\n//               onChange={this.onSliderChange}\n//               onAfterChange={this.onAfterChange}\n//               tipProps={{ visible: true }}\n//             />\n//           </ExpansionPanelSummary>\n//           <ExpansionPanelDetails>\n//             <label style={labelStyle}>Step: </label>\n//             <input\n//               type=\"number\"\n//               value={this.state.step}\n//               onChange={this.onStepChange}\n//               style={inputStyle}\n//             />\n//             <label style={labelStyle}>Section weight: </label>\n//             <input\n//               type=\"number\"\n//               value={this.state.sectionValue}\n//               onChange={this.onSectionValueChange}\n//               style={inputStyle}\n//             />\n//             <br /> <h3> Intervals</h3>\n//             <div>\n//               {this.renderAddInterval()} <br />\n//             </div>\n//             {this.state.showAdd ? (\n//               <IconButton onClick={this.changeShowAdd}>\n//                 <AddCircleOutlineIcon />\n//               </IconButton>\n//             ) : (\n//               <form>\n//                 {\" \"}\n//                 <label style={labelStyle}>Point: </label>\n//                 <input id=\"newPoint\" type=\"number\" />\n//                 <br />\n//                 <Button\n//                   variant=\"outlined\"\n//                   size=\"small\"\n//                   onClick={this.updateMarks}\n//                 >\n//                   Add\n//                 </Button>\n//               </form>\n//             )}\n//             <br />\n//           </ExpansionPanelDetails>\n//         </ExpansionPanel>\n//       </div>\n//     );\n//   }\n// }\n\nexport default class DynamicBounds extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      intervals: []\n    };\n  }\n\n  onDone = (index, interval) => {\n    debugger;\n    if (index == null) {\n      this.setState({ intervals: this.state.intervals.concat(interval) });\n    } else {\n      const intervals = this.state.intervals;\n      intervals[index] = interval;\n      this.setState({ intervals });\n    }\n  };\n\n  render() {\n    const views = this.state.intervals.map((interval, i) => (\n      <EditInterval\n        key={i}\n        interval={interval}\n        mode=\"view\"\n        onDone={this.onDone}\n        index={i}\n      />\n    ));\n\n    return (\n      <div>\n        {views}\n        <EditInterval mode=\"add\" onDone={this.onDone} index={null} />\n      </div>\n    );\n  }\n}\n\nconst defaultState = {\n  inclusive: \"true\",\n  threshold: \"\",\n  value: \"\",\n  mode: \"add\"\n};\nexport class EditInterval extends React.Component {\n  constructor(props) {\n    super(props);\n\n    let state;\n    if (props.mode === \"add\") {\n      state = { ...defaultState };\n    } else {\n      state = { ...props.interval };\n      state.mode = props.mode;\n    }\n    this.state = state;\n  }\n\n  onChangeInclusive = event => {\n    this.setState({ inclusive: event.target.value });\n  };\n\n  onChangeThreshold = event => {\n    this.setState({ threshold: event.target.value });\n  };\n\n  onChangeValue = event => {\n    this.setState({ value: event.target.value });\n  };\n\n  onAdd = () => {\n    const { inclusive, threshold, value } = this.state;\n\n    this.props.onDone(this.props.index, {\n      inclusive: inclusive === \"true\",\n      threshold: parseFloat(threshold),\n      value: parseFloat(value)\n    });\n    if (this.props.index == null) {\n      this.setState({ ...defaultState });\n    } else {\n      this.setState({ mode: \"view\" });\n    }\n  };\n  onEditInterval = () => {\n    this.setState({\n      mode: \"edit\"\n    });\n  };\n\n  renderView() {\n    const { inclusive, threshold, value } = this.state;\n\n    return (\n      <div>\n        When <span>{inclusive ? \"<=\" : \"<\"}</span> &nbsp;\n        <span>{threshold}</span> value is\n        <span> {value} </span>\n        <button onClick={this.onEditInterval}>edit</button>\n        <button>delete</button>\n      </div>\n    );\n  }\n  renderEditAdd() {\n    const { inclusive, threshold, value, mode } = this.state;\n    let label;\n    if (mode === \"add\") {\n      label = \"Add\";\n    } else if (mode === \"edit\") {\n      label = \"Done\";\n    } else if (mode === \"view\") {\n      label = \"Edit\";\n    }\n\n    return (\n      <div>\n        <select onChange={this.onChangeInclusive} value={inclusive}>\n          <option value=\"true\">&lt;=</option>\n          <option value=\"false\">&lt;</option>\n        </select>\n\n        <input value={threshold} onChange={this.onChangeThreshold} />\n        <input value={value} onChange={this.onChangeValue} />\n        <button onClick={this.onAdd}>{label}</button>\n      </div>\n    );\n  }\n\n  render() {\n    const { mode } = this.state;\n    if (mode === \"edit\" || mode === \"add\") {\n      return this.renderEditAdd();\n    }\n    return this.renderView();\n  }\n}\n\n// Threshold     Value\n// < 1           0.15\n// <= 2          0.09\n// < 10          1.5\n","import React, { Component } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Card, Container, CardContent, Slider } from \"@material-ui/core\";\n\nimport Expansion from \"./components/Expansion\";\nimport DynamicBounds from \"./components/Slider\";\nimport \"./App.css\";\n\nconst sections = [\n  {\n    title:\n      \"Динамика по чистому обороту за 36 месяцев год к году = выр 2019 / ((выр 2017 + выр 2018)/2)\",\n    comment:\n      \"(искл. внутренние переводы, кредиты/займы, возвраты авансов и ошибочных платежей)\"\n  },\n  {\n    title: \"Сальдо погашенных к полученным кредитам/займам за 24 мес.\",\n    comment: \"\"\n  },\n  {\n    title: \"Объем уплаченных налогов в % от выручки за 12 месяцев\",\n    comment: \"(искл внутренние переводы, кредиты/займы)\"\n  },\n  {\n    title:\n      \"Среднедневной объем остатка по счету за 6 мес. в % от среднемесячной выручки за 6 мес.\",\n    comment: \"(искл. внутренние переводы, кредиты/займы)\"\n  },\n  {\n    title: \"Дебиторы доля топ 3 за 12 мес.\",\n    comment: \"(искл внутренние переводы, кредиты/займы)\"\n  },\n  {\n    title: \"Дебиторы количество за 12 мес.\",\n    comment: \"(искл внутренние переводы, кредиты/займы)\"\n  },\n  {\n    title: \"Кредиторы доля топ 3 за 12 мес.\",\n    comment: \"(искл внутренние переводы, кредиты/займы)\"\n  },\n  {\n    title: \"Уплата аренды за 12 мес.\",\n    comment: \"(искл внутренние переводы, кредиты/займы)\"\n  },\n  {\n    title:\n      \"Среднедневное количество поступлений по кредитовому обороту счета за 6 мес.\",\n    comment:\n      \"(искл внутренние переводы, кредиты/займы, возвраты авансов и ошибочных)\"\n  },\n  {\n    title: \"Доля расчетов наличными (поступления/снятия) за 12 мес.\",\n    comment: \"\"\n  }\n];\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 275\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\"\n  },\n  title: {\n    fontSize: 14\n  },\n  pos: {\n    marginBottom: 12\n  }\n});\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      marks: [\n        // { label: \"<1\", value: \"(-inf; 1)\" },\n        // { label: \"1,1\", value: \"(-inf; 1)\" }\n      ],\n      step: 0.2,\n      min: 0,\n      max: 2,\n      sectionValue: 0.15,\n      stepValue: 3\n    };\n  }\n  getMarks = () => {\n    console.log(this.state);\n    debugger;\n    let marks = [];\n    let el = {};\n    for (let i = this.state.min; i <= this.state.max; i = i + this.state.step) {\n      el.label = i.toFixed(1);\n      el.value = null;\n      marks.push(el);\n    }\n    this.setState({ marks: marks });\n  };\n\n  onStepChange = step => {\n    this.setState({ step });\n\n    this.getMarks();\n  };\n\n  onMinChange = min => {\n    this.setState({ min });\n  };\n\n  onMaxChange = max => {\n    this.setState({ max });\n  };\n\n  onSectionValueChange = event => {\n    this.setState({ sectionValue: event.target.value });\n  };\n\n  render() {\n    const classes = {};\n    return (\n      <Container className=\"App\">\n        <br /> <br /> <br />\n        {sections.map((section, index) => {\n          return (\n            <Card className={classes.root} variant=\"outlined\" key={index}>\n              <CardContent>\n                {\" \"}\n                <h4>{section.title}</h4>\n                <span>{section.comment}</span>\n                <br />\n                <div className=\"expansion-interval\">\n                  <h4>Intervals</h4>\n                  <br />\n\n                  {/* <div className=\"titles\">\n                    <span> </span>\n                    <span>point</span>\n                    <span>value</span>\n                  </div> */}\n                  <DynamicBounds />\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </Container>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}