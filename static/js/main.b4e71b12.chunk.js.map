{"version":3,"sources":["components/DiscreteSlider/index.js","components/Expansion/index.js","components/Slider/index.js","App.js","serviceWorker.js","index.js"],"names":["makeStyles","theme","root","width","margin","height","spacing","Expansion","heading","fontSize","typography","pxToRem","fontWeight","fontWeightRegular","props","onMinChange","event","value","target","min","parseInt","isNaN","setState","onMaxChange","max","onStepChange","step","state","Object","assign","params","this","sectionValue","className","ExpansionPanel","ExpansionPanelSummary","expandIcon","aria-controls","id","React","Component","Range","createSliderWithTooltip","Slider","log","console","DynamicBounds","onSliderChange","values","onAfterChange","e","onIntervalValueChange","intervalValue","onSectionValueChange","updateMarks","document","getElementById","newValue","concat","labelStyle","minWidth","display","inputStyle","marginBottom","marks","style","type","onChange","onSubmit","Button","variant","onClick","visible","App","getMarks","el","i","label","toFixed","push","stepValue","Card","CardContent","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b4e71b12.chunk.js","sourcesContent":["import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n//import Typography from \"@material-ui/core/Typography\";\nimport Slider from \"@material-ui/core/Slider\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: 300\n  },\n  margin: {\n    height: theme.spacing(3)\n  }\n}));\n\n// const marks = [\n//   {\n//     value: 0,\n//     label: \"0\"\n//   },\n//   {\n//     value: 0.2,\n//     label: \"0.2\"\n//   },\n//   {\n//     value: 0.4,\n//     label: \"0.4\"\n//   },\n//   {\n//     value: 0.6,\n//     label: \"0.6\"\n//   }\n// ];\n\nfunction valuetext(value) {\n  return `${value}°C`;\n}\n\n// function valueLabelFormat(value) {\n//   return marks.findIndex(mark => mark.value === value) + 1;\n// }\n\nexport default function DiscreteSlider(props) {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Slider\n        value={[]}\n        getAriaValueText={valuetext}\n        aria-labelledby=\"discrete-slider\"\n        track={false}\n        // valueLabelDisplay=\"auto\"\n        valueLabelDisplay=\"on\"\n        step={props.step}\n        marks={true}\n        // marks={props.marks}\n        min={props.min}\n        max={props.max}\n      />\n      <div className={classes.margin} />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  ExpansionPanel,\n  ExpansionPanelSummary,\n  ExpansionPanelDetails,\n  TextField\n} from \"@material-ui/core\";\n\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport \"./style.css\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: \"100%\"\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    fontWeight: theme.typography.fontWeightRegular\n  }\n}));\n\nexport default class Expansion extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = Object.assign({}, props.params);\n  }\n\n  onMinChange = event => {\n    const value = event.target.value;\n\n    const min = parseInt(value);\n    if (!isNaN(min)) {\n      this.props.onMinChange(min);\n    }\n    this.setState({ min: value });\n  };\n  onMaxChange = event => {\n    const value = event.target.value;\n\n    const max = parseInt(value);\n    if (!isNaN(max)) {\n      this.props.onMaxChange(max);\n    }\n    this.setState({ max: value });\n  };\n  onStepChange = event => {\n    const value = event.target.value;\n    debugger;\n    const step = parseInt(value);\n    if (!isNaN(step) && step != 0) {\n      this.props.onStepChange(step);\n    }\n    this.setState({ step: value });\n  };\n\n  render() {\n    const props = this.props;\n    const { min, max, step, sectionValue } = this.state;\n    const classes = {}; //useStyles();\n\n    return (\n      <div className={classes.root}>\n        <ExpansionPanel>\n          <ExpansionPanelSummary\n            expandIcon={<SettingsIcon />}\n            aria-controls=\"panel1a-content\"\n            id=\"panel1a-header\"\n          >\n            <h4>\n              Динамика по чистому обороту за 36 месяцев год к году = выр 2019 /\n              ((выр 2017 + выр 2018)/2)\n            </h4>\n            <p>\n              (искл. внутренние переводы, кредиты/займы, возвраты авансов и\n              ошибочных платежей)\n            </p>\n          </ExpansionPanelSummary>\n          {/* <ExpansionPanelDetails>\n            <form>\n              <div className=\"expansion-interval\">\n                <span>Interval</span>\n                <div>\n                  <TextField\n                    id=\"min\"\n                    value={min}\n                    label=\"min\"\n                    type=\"number\"\n                    onChange={this.onMinChange}\n                    className={classes.textField}\n                    InputLabelProps={{\n                      shrink: true\n                    }}\n                    margin=\"normal\"\n                  />\n                  <TextField\n                    id=\"max\"\n                    label=\"max\"\n                    type=\"number\"\n                    value={max}\n                    className={classes.textField}\n                    onChange={this.onMaxChange}\n                    InputLabelProps={{\n                      shrink: true\n                    }}\n                    margin=\"normal\"\n                  />\n                </div>\n              </div>\n              <TextField\n                id=\"step\"\n                label=\"Step\"\n                value={step}\n                className={classes.textField}\n                onChange={this.onStepChange}\n                InputLabelProps={{\n                  shrink: true\n                }}\n                margin=\"normal\"\n              />\n\n              <TextField\n                id=\"sectionValue\"\n                label=\"Section value\"\n                type=\"number\"\n                value={sectionValue}\n                className={classes.textField}\n                onChange={props.onSectionValueChange}\n                InputLabelProps={{\n                  shrink: true\n                }}\n                margin=\"normal\"\n              />\n            </form>\n          </ExpansionPanelDetails>*/}\n        </ExpansionPanel>\n      </div>\n    );\n  }\n}\n","import \"rc-slider/assets/index.css\";\nimport React from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport Slider, { createSliderWithTooltip } from \"rc-slider\";\nimport \"./style.css\";\n\nconst Range = createSliderWithTooltip(Slider.Range);\n\nfunction log(value) {\n  console.log(value); //eslint-disable-line\n}\nexport default class DynamicBounds extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const min = -10;\n    const max = 10;\n\n    this.state = {\n      min,\n      max,\n      step: 1,\n\n      values: [],\n      intervalValue: 0,\n      sectionValue: 0.15\n    };\n  }\n\n  onSliderChange = values => {\n    log(values);\n    this.setState({ values });\n  };\n  onAfterChange = value => {\n    console.log(value); //eslint-disable-line\n  };\n  onMinChange = e => {\n    this.setState({\n      min: parseInt(e.target.value)\n    });\n  };\n  onIntervalValueChange = e => {\n    this.setState({\n      intervalValue: +e.target.value || 0\n    });\n  };\n  onMaxChange = e => {\n    debugger;\n    this.setState({\n      max: parseInt(e.target.value)\n    });\n  };\n  onStepChange = e => {\n    this.setState({\n      step: +e.target.value || 1\n    });\n  };\n  onSectionValueChange = event => {\n    this.setState({ sectionValue: event.target.value });\n  };\n  updateMarks = () => {\n    const min = document.getElementById(\"newIntMin\").value;\n    const max = document.getElementById(\"newIntMax\").value;\n    const value = document.getElementById(\"newIntValue\").value;\n    debugger;\n    const newValue = this.state.values.concat([parseInt(min), parseInt(max)]);\n    this.setState({\n      //   marks: {\n      //     [min]: min,\n      //     [max]: max\n      //   },\n      values: newValue\n    });\n    document.getElementById(\"newIntMin\").value = \"\";\n    document.getElementById(\"newIntMax\").value = \"\";\n    document.getElementById(\"newIntValue\").value = \"\";\n  };\n  render() {\n    const labelStyle = { minWidth: \"60px\", display: \"inline-block\" };\n    const inputStyle = { marginBottom: \"10px\" };\n\n    const { min, max } = this.state;\n    const marks = {\n      [min]: <strong>{min}</strong>,\n      [max]: <strong>{max}</strong>\n    };\n\n    return (\n      <div className=\"inputs\">\n        <h4> Section settings</h4>\n        <label style={labelStyle}>Min: </label>\n        <input\n          type=\"number\"\n          value={this.state.min}\n          onChange={this.onMinChange}\n          style={inputStyle}\n        />\n\n        <label style={labelStyle}>Max: </label>\n        <input\n          type=\"number\"\n          value={this.state.max}\n          onChange={this.onMaxChange}\n          style={inputStyle}\n        />\n\n        {/* <label style={labelStyle}>Step: </label>\n        <input\n          type=\"number\"\n          value={this.state.step}\n          onChange={this.onStepChange}\n          style={inputStyle}\n        /> */}\n        <label style={labelStyle}>Section weight: </label>\n        <input\n          type=\"number\"\n          value={this.state.sectionValue}\n          onChange={this.onSectionValueChange}\n          style={inputStyle}\n        />\n        <br />\n        <br />\n        <h4> Add interval</h4>\n        <form onSubmit={this.onSubmit}>\n          <label style={labelStyle}>Min: </label>\n          <input id=\"newIntMin\" type=\"number\" />\n\n          <label style={labelStyle}>Max: </label>\n          <input id=\"newIntMax\" type=\"number\" />\n          <label style={labelStyle}>Value: </label>\n          <input\n            id=\"newIntValue\"\n            type=\"number\"\n            onChange={this.onIntervalValueChange}\n          />\n          <br />\n          <Button variant=\"outlined\" onClick={this.updateMarks}>\n            Add\n          </Button>\n        </form>\n        <br />\n\n        <br />\n        <br />\n        <Range\n          value={this.state.values}\n          min={this.state.min}\n          max={this.state.max}\n          step={this.state.step}\n          marks={marks}\n          onChange={log}\n          onChange={this.onSliderChange}\n          onAfterChange={this.onAfterChange}\n          tipProps={{ visible: true }}\n        />\n      </div>\n    );\n  }\n}\n\n// ReactDOM.render(\n//   <div>\n//     <div style={style}>\n//       <p>Slider with dynamic `min` `max` `step`</p>\n//       <DynamicBounds />\n//     </div>\n//   </div>,\n//   document.getElementById(\"__react-content\")\n// );\n","import React, { Component } from \"react\";\n\nimport { Card, CardContent } from \"@material-ui/core\";\n//import clsx from \"clsx\";\n\nimport DiscreteSlider from \"./components/DiscreteSlider\";\nimport Expansion from \"./components/Expansion\";\nimport DynamicBounds from \"./components/Slider\";\nimport \"./App.css\";\n\nconst sections = [\n  {\n    title:\n      \"Динамика по чистому обороту за 36 месяцев год к году = выр 2019 / ((выр 2017 + выр 2018)/2)\",\n    comment:\n      \"(искл. внутренние переводы, кредиты/займы, возвраты авансов и ошибочных платежей)\"\n  },\n  {\n    title: \"Сальдо погашенных к полученным кредитам/займам за 24 мес.\",\n    comment: \"\"\n  },\n  {\n    title: \"Объем уплаченных налогов в % от выручки за 12 месяцев\",\n    comment: \"(искл внутренние переводы, кредиты/займы)\"\n  },\n  {\n    title:\n      \"Среднедневной объем остатка по счету за 6 мес. в % от среднемесячной выручки за 6 мес.\",\n    comment: \"(искл. внутренние переводы, кредиты/займы)\"\n  },\n  {\n    title: \"Дебиторы доля топ 3 за 12 мес.\",\n    comment: \"(искл внутренние переводы, кредиты/займы)\"\n  },\n  {\n    title: \"Дебиторы количество за 12 мес.\",\n    comment: \"(искл внутренние переводы, кредиты/займы)\"\n  },\n  {\n    title: \"Кредиторы доля топ 3 за 12 мес.\",\n    comment: \"(искл внутренние переводы, кредиты/займы)\"\n  },\n  {\n    title: \"Уплата аренды за 12 мес.\",\n    comment: \"(искл внутренние переводы, кредиты/займы)\"\n  },\n  {\n    title:\n      \"Среднедневное количество поступлений по кредитовому обороту счета за 6 мес.\",\n    comment:\n      \"(искл внутренние переводы, кредиты/займы, возвраты авансов и ошибочных)\"\n  },\n  {\n    title: \"Доля расчетов наличными (поступления/снятия) за 12 мес.\",\n    comment: \"\"\n  }\n];\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      marks: [\n        // { label: \"<1\", value: \"(-inf; 1)\" },\n        // { label: \"1,1\", value: \"(-inf; 1)\" }\n      ],\n      step: 0.2,\n      min: 0,\n      max: 2,\n      sectionValue: 0.15,\n      stepValue: 3\n    };\n  }\n  getMarks = () => {\n    console.log(this.state);\n    debugger;\n    let marks = [];\n    let el = {};\n    for (let i = this.state.min; i <= this.state.max; i = i + this.state.step) {\n      el.label = i.toFixed(1);\n      el.value = null;\n      marks.push(el);\n    }\n    this.setState({ marks: marks });\n  };\n\n  onStepChange = step => {\n    this.setState({ step });\n\n    this.getMarks();\n  };\n\n  onMinChange = min => {\n    this.setState({ min });\n  };\n\n  onMaxChange = max => {\n    this.setState({ max });\n  };\n\n  onSectionValueChange = event => {\n    this.setState({ sectionValue: event.target.value });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Card>\n          <Expansion\n            params={this.state}\n            onSubmit={this.onSubmit}\n            onMinChange={this.onMinChange}\n            onMaxChange={this.onMaxChange}\n            onSectionValueChange={this.onSectionValueChange}\n            onStepChange={this.onStepChange}\n          />\n          <CardContent>\n            <DynamicBounds />\n            <br /> <br /> <br />\n            {/* <DiscreteSlider\n              marks={this.state.marks}\n              min={this.state.min}\n              max={this.state.max}\n              step={this.state.step}\n            /> */}\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}