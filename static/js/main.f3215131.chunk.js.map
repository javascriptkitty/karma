{"version":3,"sources":["components/Expansion/index.js","components/Slider/index.js","App.js","serviceWorker.js","index.js"],"names":["Expansion","makeStyles","theme","root","width","heading","fontSize","typography","pxToRem","fontWeight","fontWeightRegular","props","onStepChange","event","value","target","parseInt","setState","step","onSectionValueChange","sectionValue","state","Object","assign","params","this","labelStyle","minWidth","display","inputStyle","marginBottom","className","ExpansionPanel","ExpansionPanelSummary","expandIcon","aria-controls","id","ExpansionPanelDetails","style","type","onChange","React","Component","createSliderWithTooltip","Slider","Range","DynamicBounds","intervalId","onDone","index","interval","validateInterval","intervals","concat","showAdd","isOpenAlert","changeShowAdd","handleClose","threshold","Infinity","inclusive","last","i","length","sort","a","b","lastInterval","views","map","res","key","mode","TableHead","TableRow","TableCell","IconButton","onClick","Dialog","open","onClose","Button","color","defaultState","EditInterval","onChangeInclusive","onChangeThreshold","onChangeValue","onAdd","parseFloat","onEditInterval","console","log","renderInterval","label","classes","FormControl","variant","Select","native","inputProps","shrink","TextField","textField","InputLabelProps","margin","renderEditAdd","renderView","App","bullet","transform","title","pos","loadMetrics","metrics","data","getMarks","marks","el","min","max","toFixed","push","onMinChange","onMaxChange","stepValue","Container","section","Card","CardContent","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4iLAsBqBA,G,OAVHC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,MAAO,QAETC,QAAS,CACPC,SAAUJ,EAAMK,WAAWC,QAAQ,IACnCC,WAAYP,EAAMK,WAAWG,uB,YAK/B,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAMRC,aAAe,SAAAC,GACb,IAAMC,EAAQD,EAAME,OAAOD,MAEdE,SAASF,GAItB,EAAKG,SAAS,CAAEC,KAAMJ,KAdL,EAiBnBK,qBAAuB,SAAAN,GACrB,IAAMC,EAAQD,EAAME,OAAOD,MAENE,SAASF,GAE9B,EAAKG,SAAS,CAAEG,aAAcN,KApB9B,EAAKO,MAAQC,OAAOC,OAAO,GAAIZ,EAAMa,QACrC,EAAKH,MAAMD,aAAe,IAC1B,EAAKC,MAAMH,KAAO,EAJD,E,sEA0BHO,KAAKd,MAAnB,IADO,EAEwBc,KAAKJ,MAC9BK,GAHC,EAECR,KAFD,EAEOE,aACK,CAAEO,SAAU,OAAQC,QAAS,iBAC1CC,EAAa,CAAEC,aAAc,QAInC,OACE,yBAAKC,UAAU,aACb,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,WAAY,kBAAC,IAAD,MACZC,gBAAc,kBACdC,GAAG,kBAEH,0CAaF,kBAACC,EAAA,EAAD,KACE,2BAAOC,MAAOZ,GAAd,UACA,2BACEa,KAAK,SACLzB,MAAOW,KAAKJ,MAAMH,KAClBsB,SAAUf,KAAKb,aACf0B,MAAOT,IAET,2BAAOS,MAAOZ,GAAd,oBACA,2BACEa,KAAK,SACLzB,MAAOW,KAAKJ,MAAMD,aAClBoB,SAAUf,KAAKN,qBACfmB,MAAOT,W,GApEkBY,IAAMC,Y,mLCE/BC,YAAwBC,IAAOC,O,IAMxBC,E,YACnB,WAAYnC,GAAQ,IAAD,8BACjB,4CAAMA,KA6BRoC,WAAa,EA9BM,EAgCnBC,OAAS,SAACC,EAAOC,GACf,GAAK,EAAKC,iBAAiBD,GAK3B,GAAa,MAATD,EACFC,EAASd,GAAK,EAAKW,aACnB,EAAK9B,SAAS,CACZmC,UAAW,EAAK/B,MAAM+B,UAAUC,OAAOH,GACvCI,SAAS,QAEN,CACL,IAAMF,EAAS,YAAO,EAAK/B,MAAM+B,WACjCA,EAAUH,GAASC,EACnB,EAAKjC,SAAS,CAAEmC,YAAWE,SAAS,SAbpC,EAAKrC,SAAS,CAAEsC,aAAa,KAlCd,EAkDnBC,cAAgB,WACd,EAAKvC,SAAS,CACZqC,SAAU,EAAKjC,MAAMiC,WApDN,EAuDnBG,YAAc,WACZ,EAAKxC,SAAS,CACZsC,aAAa,KAtDf,EAAKlC,MAAQ,CACX+B,UAAW,CACT,CACEhB,GAAI,EAAKW,aACTW,UAAWC,IACX7C,MAAO,EACP8C,WAAW,IAGfN,SAAS,EACTC,aAAa,GAbE,E,8EAiBFL,GAIf,IAJ0B,IAClBE,EAAc3B,KAAKJ,MAAnB+B,UACFS,EAAOX,EAEJY,EAAI,EAAGA,EAAIV,EAAUW,OAAQD,IACpC,GAAIV,EAAUU,GAAGJ,WAAaG,EAAKH,UACjC,OAAO,EAIX,OAAO,I,+BAiCC,IAAD,SAE0BjC,KAAKJ,MAAhC+B,EAFC,EAEDA,UAAWG,EAFV,EAEUA,YAEjBH,EAAUY,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEP,UAAYQ,EAAER,UAAY,GAAK,KAG3D,IAAIS,EAAe,KACbC,EAAQhB,EAAUiB,KAAI,SAACnB,EAAUY,GACrC,IAAMQ,EACJ,kBAAC,EAAD,CACEC,IAAKrB,EAASd,GACd+B,aAAcA,EACdjB,SAAUA,EACVsB,KAAK,OACLxB,OAAQ,EAAKA,OACbC,MAAOa,IAIX,OADAK,EAAejB,EACRoB,KAGT,OACE,6BACG7C,KAAKJ,MAAM+B,UAAUW,OAAS,EAC7B,kBAACU,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,iBACA,kBAACA,EAAA,EAAD,cACA,kBAACA,EAAA,EAAD,UACA,kBAACA,EAAA,EAAD,YAGF,KACHP,EACA3C,KAAKJ,MAAMiC,QACV,kBAACsB,EAAA,EAAD,CAAYC,QAASpD,KAAK+B,eACxB,kBAAC,IAAD,OAGF,kBAAC,EAAD,CACEgB,KAAK,MACLxB,OAAQvB,KAAKuB,OACbC,MAAO,KACPG,UAAW3B,KAAKJ,MAAM+B,YAGzBG,EACC,kBAACuB,EAAA,EAAD,CAAQC,MAAM,EAAMC,QAASvD,KAAKgC,aAAlC,6BAEE,kBAACwB,EAAA,EAAD,CAAQJ,QAASpD,KAAKgC,YAAayB,MAAM,WAAzC,OAIA,U,GApH+BzC,IAAMC,WA0H3CyC,EAAe,CACnBvB,UAAW,OACXF,UAAW,GACX5C,MAAO,GACP0D,KAAM,MACNjB,aAAa,GAEF6B,EAAb,YACE,WAAYzE,GAAQ,IAAD,EAGbU,EAHa,4BACjB,4CAAMV,KAkBR0E,kBAAoB,SAAAxE,GAClB,EAAKI,SAAS,CAAE2C,UAAW/C,EAAME,OAAOD,SApBvB,EAuBnBwE,kBAAoB,SAAAzE,GAClB,EAAKI,SAAS,CAAEyC,UAAW7C,EAAME,OAAOD,SAxBvB,EA2BnByE,cAAgB,SAAA1E,GACd,EAAKI,SAAS,CAAEH,MAAOD,EAAME,OAAOD,SA5BnB,EA+BnB0E,MAAQ,WAAO,IAAD,EAC0B,EAAKnE,MAArCuC,EADM,EACNA,UAAWF,EADL,EACKA,UAAW5C,EADhB,EACgBA,MAE5B,EAAKH,MAAMqC,OAAO,EAAKrC,MAAMsC,MAAO,CAClCW,UAAyB,SAAdA,EACXF,UAAW+B,WAAW/B,GACtB5C,MAAO2E,WAAW3E,KAGI,MAApB,EAAKH,MAAMsC,MACb,EAAKhC,SAAL,eAAmBkE,IAEnB,EAAKlE,SAAS,CAAEuD,KAAM,UA3CP,EA8CnBkB,eAAiB,WACf,EAAKzE,SAAS,CACZuD,KAAM,UA5CW,QAAf7D,EAAM6D,KACRnD,EAAK,eACA8D,IAGL9D,EAAK,eAAQV,EAAMuC,SAAd,CAAwBiB,aAAcxD,EAAMwD,gBAC3CK,KAAO7D,EAAM6D,KAErB,EAAKnD,MAAQA,EAZI,EADrB,8FAgBmCV,GAC/Bc,KAAKR,SAAL,eAAmBN,EAAMuC,SAAzB,CAAmCiB,aAAcxD,EAAMwD,kBAjB3D,uCAsDoB,IAAD,EACgC1C,KAAKJ,MAA5CuC,EADO,EACPA,UAAWF,EADJ,EACIA,UAAWS,EADf,EACeA,aAE9B,OADAwB,QAAQC,IAAIzB,GAEV,8BACGA,GAAgBA,EAAaP,UAAY,IAAM,IAC/CO,EAAeA,EAAaT,UAAY,WAF3C,QAIGA,IAAcC,IAAW,SAAMD,EAC/BE,EAAY,IAAM,OA/D3B,mCAoEgB,IAAD,EAC6BnC,KAAKJ,MAAfP,GADnB,EACH8C,UADG,EACQF,UADR,EACmB5C,OAE9B,OACE,yBAAKiB,UAAU,iBACZN,KAAKoE,iBACN,kCAAQ/E,EAAR,KACA,kBAAC8D,EAAA,EAAD,CAAYC,QAASpD,KAAKiE,gBACxB,kBAAC,IAAD,OAEF,kBAACd,EAAA,EAAD,KACE,kBAAC,IAAD,UA/EV,sCAsFI,IAGIkB,EAHEC,EAAU,GADF,EAEgCtE,KAAKJ,MAA3CuC,EAFM,EAENA,UAAWF,EAFL,EAEKA,UAAW5C,EAFhB,EAEgBA,MAAO0D,EAFvB,EAEuBA,KAWrC,MARa,QAATA,EACFsB,EAAQ,MACU,SAATtB,EACTsB,EAAQ,OACU,SAATtB,IACTsB,EAAQ,QAIR,yBAAK/D,UAAU,gBACb,kBAACiE,EAAA,EAAD,CAAaC,QAAQ,YACnB,kBAACC,EAAA,EAAD,CACEC,QAAM,EACN3D,SAAUf,KAAK4D,kBACfvE,MAAO8C,EACPwC,WAAY,CACVC,QAAQ,IAGV,4BAAQvF,MAAM,QAAd,UACA,4BAAQA,MAAM,SAAd,OAGH4C,IAAcC,IACb,IAEA,kBAAC2C,EAAA,EAAD,CACElE,GAAG,QACH0D,MAAM,QACNvD,KAAK,SACLzB,MAAO4C,EACPlB,SAAUf,KAAK6D,kBACfvD,UAAWgE,EAAQQ,UACnBC,gBAAiB,CACfH,QAAQ,GAEVI,OAAO,WAGX,kBAACH,EAAA,EAAD,CACElE,GAAG,QACH0D,MAAM,QACNhF,MAAOA,EAEP0B,SAAUf,KAAK8D,cACfxD,UAAWgE,EAAQQ,UACnBC,gBAAiB,CACfH,QAAQ,GAEVI,OAAO,WAET,kBAACxB,EAAA,EAAD,CAAQgB,QAAQ,WAAWpB,QAASpD,KAAK+D,OACtCM,MA9IX,+BAoJY,IACAtB,EAAS/C,KAAKJ,MAAdmD,KAER,MAAa,SAATA,GAA4B,QAATA,EACd/C,KAAKiF,gBAEPjF,KAAKkF,iBA1JhB,GAAkClE,IAAMC,W,SCrInBkE,G,cAhBH3G,YAAW,CAC3BE,KAAM,CACJwB,SAAU,KAEZkF,OAAQ,CACNjF,QAAS,eACT6E,OAAQ,QACRK,UAAW,cAEbC,MAAO,CACLzG,SAAU,IAEZ0G,IAAK,CACHlF,aAAc,M,YAIhB,WAAYnB,GAAQ,IAAD,8BACjB,4CAAMA,KAYRsG,YAAc,WAOZ,EAAKhG,SAAS,CAEZiG,QAASC,EAAKD,WAtBC,EA+BnBE,SAAW,WACTzB,QAAQC,IAAI,EAAKvE,OAIjB,IAFA,IAAIgG,EAAQ,GACRC,EAAK,GACAxD,EAAI,EAAKzC,MAAMkG,IAAKzD,GAAK,EAAKzC,MAAMmG,IAAK1D,GAAQ,EAAKzC,MAAMH,KACnEoG,EAAGxB,MAAQhC,EAAE2D,QAAQ,GACrBH,EAAGxG,MAAQ,KACXuG,EAAMK,KAAKJ,GAEb,EAAKrG,SAAS,CAAEoG,MAAOA,KAzCN,EA4CnBzG,aAAe,SAAAM,GACb,EAAKD,SAAS,CAAEC,SAEhB,EAAKkG,YA/CY,EAkDnBO,YAAc,SAAAJ,GACZ,EAAKtG,SAAS,CAAEsG,SAnDC,EAsDnBK,YAAc,SAAAJ,GACZ,EAAKvG,SAAS,CAAEuG,SAvDC,EA0DnBrG,qBAAuB,SAAAN,GACrB,EAAKI,SAAS,CAAEG,aAAcP,EAAME,OAAOD,SAxD3C,EAAKO,MAAQ,CACXiC,SAAS,EACTpC,KAAM,GACNqG,IAAK,EACLC,IAAK,EACLpG,aAAc,IACdyG,UAAW,EACXX,QAAS,IAVM,E,iFA6BjBzF,KAAKwF,gB,+BAiCG,IAAD,OACDlB,EAAU,GAChB,OACE,kBAAC+B,EAAA,EAAD,CAAW/F,UAAU,OACnB,6BADF,IACS,6BADT,IACgB,6BACbN,KAAKJ,MAAM6F,QAAQ7C,KAAI,SAAC0D,EAAS9E,GAChC,OACE,kBAAC+E,EAAA,EAAD,CAAMjG,UAAWgE,EAAQ5F,KAAM8F,QAAQ,WAAW1B,IAAKtB,GACrD,kBAACgF,EAAA,EAAD,KACG,IACD,4BAAKF,EAAQhB,OACb,6BACA,yBAAKhF,UAAU,sBACb,6BACA,kBAAC,EAAD,CACEZ,qBAAsB,EAAKA,qBAC3BP,aAAc,EAAKA,eAErB,kBAAC,EAAD,iB,GAjFe8B,cCdbwF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvD,QAAQuD,MAAMA,EAAMC,c","file":"static/js/main.f3215131.chunk.js","sourcesContent":["import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  ExpansionPanel,\n  ExpansionPanelSummary,\n  ExpansionPanelDetails,\n  TextField\n} from \"@material-ui/core\";\n\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport \"./style.css\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: \"100%\"\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    fontWeight: theme.typography.fontWeightRegular\n  }\n}));\n\nexport default class Expansion extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = Object.assign({}, props.params);\n    this.state.sectionValue = 0.15;\n    this.state.step = 0;\n  }\n\n  onStepChange = event => {\n    const value = event.target.value;\n    debugger;\n    const step = parseInt(value);\n    // if (!isNaN(step) && step != 0) {\n    //   this.props.onStepChange(step);\n    // }\n    this.setState({ step: value });\n  };\n\n  onSectionValueChange = event => {\n    const value = event.target.value;\n    debugger;\n    const sectionValue = parseInt(value);\n\n    this.setState({ sectionValue: value });\n  };\n\n  render() {\n    const props = this.props;\n    const { step, sectionValue } = this.state;\n    const labelStyle = { minWidth: \"60px\", display: \"inline-block\" };\n    const inputStyle = { marginBottom: \"10px\" };\n\n    const classes = {}; //useStyles();\n\n    return (\n      <div className=\"expansion\">\n        <ExpansionPanel>\n          <ExpansionPanelSummary\n            expandIcon={<SettingsIcon />}\n            aria-controls=\"panel1a-content\"\n            id=\"panel1a-header\"\n          >\n            <h4>Intervals</h4>\n            {/* <Range\n              value={this.state.points}\n              min={this.state.min}\n              max={this.state.max}\n              step={this.state.step}\n              marks={marks}\n              onChange={log}\n              onChange={this.onSliderChange}\n              onAfterChange={this.onAfterChange}\n              tipProps={{ visible: true }}\n            /> */}\n          </ExpansionPanelSummary>\n          <ExpansionPanelDetails>\n            <label style={labelStyle}>Step: </label>\n            <input\n              type=\"number\"\n              value={this.state.step}\n              onChange={this.onStepChange}\n              style={inputStyle}\n            />\n            <label style={labelStyle}>Section weight: </label>\n            <input\n              type=\"number\"\n              value={this.state.sectionValue}\n              onChange={this.onSectionValueChange}\n              style={inputStyle}\n            />\n          </ExpansionPanelDetails>\n        </ExpansionPanel>\n      </div>\n    );\n  }\n}\n","import \"rc-slider/assets/index.css\";\nimport React, { Fragment } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  Button,\n  IconButton,\n  TextField,\n  Select,\n  FormControl,\n  Dialog,\n  TableCell,\n  TableHead,\n  TableRow,\n  ExpansionPanel,\n  ExpansionPanelSummary,\n  ExpansionPanelDetails\n} from \"@material-ui/core\";\nimport Slider, { createSliderWithTooltip } from \"rc-slider\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\nimport \"./style.css\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport EditIcon from \"@material-ui/icons/Edit\";\n\nconst Range = createSliderWithTooltip(Slider.Range);\n\nfunction log(value) {\n  console.log(value); //eslint-disable-line\n}\n\nexport default class DynamicBounds extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      intervals: [\n        {\n          id: this.intervalId++,\n          threshold: Infinity,\n          value: 0,\n          inclusive: false\n        }\n      ],\n      showAdd: true,\n      isOpenAlert: false\n    };\n  }\n\n  validateInterval(interval) {\n    const { intervals } = this.state;\n    const last = interval;\n\n    for (let i = 0; i < intervals.length; i++) {\n      if (intervals[i].threshold == last.threshold) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  intervalId = 0;\n\n  onDone = (index, interval) => {\n    if (!this.validateInterval(interval)) {\n      this.setState({ isOpenAlert: true });\n      return;\n    }\n\n    if (index == null) {\n      interval.id = this.intervalId++;\n      this.setState({\n        intervals: this.state.intervals.concat(interval),\n        showAdd: true\n      });\n    } else {\n      const intervals = [...this.state.intervals];\n      intervals[index] = interval;\n      this.setState({ intervals, showAdd: true });\n    }\n  };\n  changeShowAdd = () => {\n    this.setState({\n      showAdd: !this.state.showAdd\n    });\n  };\n  handleClose = () => {\n    this.setState({\n      isOpenAlert: false\n    });\n  };\n  render() {\n    debugger;\n    let { intervals, isOpenAlert } = this.state;\n\n    intervals.sort((a, b) => (a.threshold > b.threshold ? 1 : -1));\n\n    debugger;\n    let lastInterval = null;\n    const views = intervals.map((interval, i) => {\n      const res = (\n        <EditInterval\n          key={interval.id}\n          lastInterval={lastInterval}\n          interval={interval}\n          mode=\"view\"\n          onDone={this.onDone}\n          index={i}\n        />\n      );\n      lastInterval = interval;\n      return res;\n    });\n\n    return (\n      <div>\n        {this.state.intervals.length > 0 ? (\n          <TableHead>\n            <TableRow>\n              <TableCell>interval</TableCell>\n              <TableCell>value</TableCell>\n              <TableCell> </TableCell>\n              <TableCell> </TableCell>\n            </TableRow>\n          </TableHead>\n        ) : null}\n        {views}\n        {this.state.showAdd ? (\n          <IconButton onClick={this.changeShowAdd}>\n            <AddCircleOutlineIcon />\n          </IconButton>\n        ) : (\n          <EditInterval\n            mode=\"add\"\n            onDone={this.onDone}\n            index={null}\n            intervals={this.state.intervals}\n          />\n        )}\n        {isOpenAlert ? (\n          <Dialog open={true} onClose={this.handleClose}>\n            This is an error interval!\n            <Button onClick={this.handleClose} color=\"primary\">\n              ok\n            </Button>\n          </Dialog>\n        ) : null}\n      </div>\n    );\n  }\n}\n\nconst defaultState = {\n  inclusive: \"true\",\n  threshold: \"\",\n  value: \"\",\n  mode: \"add\",\n  isOpenAlert: false\n};\nexport class EditInterval extends React.Component {\n  constructor(props) {\n    super(props);\n\n    let state;\n    if (props.mode === \"add\") {\n      state = {\n        ...defaultState\n      };\n    } else {\n      state = { ...props.interval, lastInterval: props.lastInterval };\n      state.mode = props.mode;\n    }\n    this.state = state;\n  }\n\n  UNSAFE_componentWillReceiveProps(props) {\n    this.setState({ ...props.interval, lastInterval: props.lastInterval });\n  }\n\n  onChangeInclusive = event => {\n    this.setState({ inclusive: event.target.value });\n  };\n\n  onChangeThreshold = event => {\n    this.setState({ threshold: event.target.value });\n  };\n\n  onChangeValue = event => {\n    this.setState({ value: event.target.value });\n  };\n\n  onAdd = () => {\n    let { inclusive, threshold, value } = this.state;\n    debugger;\n    this.props.onDone(this.props.index, {\n      inclusive: inclusive === \"true\",\n      threshold: parseFloat(threshold),\n      value: parseFloat(value)\n    });\n\n    if (this.props.index == null) {\n      this.setState({ ...defaultState });\n    } else {\n      this.setState({ mode: \"view\" });\n    }\n  };\n  onEditInterval = () => {\n    this.setState({\n      mode: \"edit\"\n    });\n  };\n\n  // [)\n  renderInterval() {\n    const { inclusive, threshold, lastInterval } = this.state;\n    console.log(lastInterval);\n    return (\n      <span>\n        {lastInterval && lastInterval.inclusive ? \"[\" : \"(\"}\n        {lastInterval ? lastInterval.threshold : \"(-∞\"}\n        ,&nbsp;\n        {threshold === Infinity ? \"∞\" : threshold}\n        {inclusive ? \"]\" : \")\"}\n      </span>\n    );\n  }\n\n  renderView() {\n    const { inclusive, threshold, value } = this.state;\n\n    return (\n      <div className=\"interval-line\">\n        {this.renderInterval()}\n        <span> {value} </span>\n        <IconButton onClick={this.onEditInterval}>\n          <EditIcon />\n        </IconButton>\n        <IconButton>\n          <DeleteIcon />\n        </IconButton>\n      </div>\n    );\n  }\n\n  renderEditAdd() {\n    const classes = {};\n    const { inclusive, threshold, value, mode } = this.state;\n\n    let label;\n    if (mode === \"add\") {\n      label = \"Add\";\n    } else if (mode === \"edit\") {\n      label = \"Done\";\n    } else if (mode === \"view\") {\n      label = \"Edit\";\n    }\n\n    return (\n      <div className=\"interval-add\">\n        <FormControl variant=\"outlined\">\n          <Select\n            native\n            onChange={this.onChangeInclusive}\n            value={inclusive}\n            inputProps={{\n              shrink: true\n            }}\n          >\n            <option value=\"true\">&le;</option>\n            <option value=\"false\">&lt;</option>\n          </Select>\n        </FormControl>\n        {threshold === Infinity ? (\n          \"8\"\n        ) : (\n          <TextField\n            id=\"point\"\n            label=\"POINT\"\n            type=\"number\"\n            value={threshold}\n            onChange={this.onChangeThreshold}\n            className={classes.textField}\n            InputLabelProps={{\n              shrink: true\n            }}\n            margin=\"normal\"\n          />\n        )}\n        <TextField\n          id=\"value\"\n          label=\"VALUE\"\n          value={value}\n          // defaultValue=\"0\"\n          onChange={this.onChangeValue}\n          className={classes.textField}\n          InputLabelProps={{\n            shrink: true\n          }}\n          margin=\"normal\"\n        />\n        <Button variant=\"outlined\" onClick={this.onAdd}>\n          {label}\n        </Button>\n      </div>\n    );\n  }\n\n  render() {\n    const { mode } = this.state;\n\n    if (mode === \"edit\" || mode === \"add\") {\n      return this.renderEditAdd();\n    }\n    return this.renderView();\n  }\n}\n","import React, { Component } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Card, Container, CardContent, Slider } from \"@material-ui/core\";\n\nimport Expansion from \"./components/Expansion\";\nimport DynamicBounds from \"./components/Slider\";\nimport data from \"../src/data/data.json\";\nimport axios from \"axios\";\nimport \"./App.css\";\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 275\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\"\n  },\n  title: {\n    fontSize: 14\n  },\n  pos: {\n    marginBottom: 12\n  }\n});\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      showAdd: true,\n      step: 0.2,\n      min: 0,\n      max: 2,\n      sectionValue: 0.15,\n      stepValue: 3,\n      metrics: []\n    };\n  }\n  loadMetrics = () => {\n    const url = `/api/`;\n\n    // return axios\n    //   .get(url)\n    //   .then(res => {\n    //     console.log(res.data);\n    this.setState({\n      //     metrics: res.data\n      metrics: data.metrics\n    });\n    //   })\n    //   .catch(err => console.log(err));\n  };\n\n  componentDidMount() {\n    this.loadMetrics();\n  }\n  getMarks = () => {\n    console.log(this.state);\n    debugger;\n    let marks = [];\n    let el = {};\n    for (let i = this.state.min; i <= this.state.max; i = i + this.state.step) {\n      el.label = i.toFixed(1);\n      el.value = null;\n      marks.push(el);\n    }\n    this.setState({ marks: marks });\n  };\n\n  onStepChange = step => {\n    this.setState({ step });\n\n    this.getMarks();\n  };\n\n  onMinChange = min => {\n    this.setState({ min });\n  };\n\n  onMaxChange = max => {\n    this.setState({ max });\n  };\n\n  onSectionValueChange = event => {\n    this.setState({ sectionValue: event.target.value });\n  };\n\n  render() {\n    const classes = {};\n    return (\n      <Container className=\"App\">\n        <br /> <br /> <br />\n        {this.state.metrics.map((section, index) => {\n          return (\n            <Card className={classes.root} variant=\"outlined\" key={index}>\n              <CardContent>\n                {\" \"}\n                <h4>{section.title}</h4>\n                <br />\n                <div className=\"expansion-interval\">\n                  <br />\n                  <Expansion\n                    onSectionValueChange={this.onSectionValueChange}\n                    onStepChange={this.onStepChange}\n                  />\n                  <DynamicBounds />\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </Container>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}